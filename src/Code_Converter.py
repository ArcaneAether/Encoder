'''

This program is designed to hold all of the conversion functions used in the "Encoder" program series. This program
also contains all of the dictionaries used in the standalone converter programs to reduce the number of 'import'
functions used in the main "Encoder" programs.

'''
MORSE_CODE_DICT = {
    '!': '-.-.--',      'A': '.-',
    '\"': '.-..-.',     'B': '-...',
    '$': '...-..-',     'C': '-.-.',
    '&': '.-...',       'D': '-..',
    '\'': '.----.',     'E': '.',
    '(': '-.--.',       'F': '..-.',
    ')': '-.--.-',      'G': '--.',
    '+': '.-.-.',       'H': '....',
    ',': '--..--',      'I': '..',
    '-': '-....-',      'J': '.---',
    '.': '.-.-.-',      'K': '-.-',
    '/': '-..-.',       'L': '.-..',
    0: '-----',         'M': '--',
    1: '.----',         'N': '-.',
    2: '..---',         'O': '---',
    3: '...--',         'P': '.--.',
    4: '....-',         'Q': '--.-',
    5: '.....',         'R': '.-.',
    6: '-....',         'S': '...',
    7: '--...',         'T': '-',
    8: '---..',         'U': '..-',
    9: '----.',         'V': '...-',
    ':': '---...',      'W': '.--',
    ';': '-.-.-.',      'X': '-..-',
    '=': '-...-',       'Y': '-.--',
    '?': '..--..',      'Z': '--..',
    '@': '.--.-.',      '_': '..--.-',
}
BINARY_CODE_DICT = {
    '[NULL]': '00000000',                   '+': '00101011',    'V': '01010110',
    '[START OF HEADING]': '00000001',       ',': '00101100',    'W': '01010111',
    '[START OF TEXT]': '00000010',          '-': '00101101',    'X': '01011000',
    '[END OF TEXT]': '00000011',            '.': '00101110',    'Y': '01011001',
    '[END OF TRANSMISSION]': '00000100',    '/': '00101111',    'Z': '01011010',
    '[ENQUIRY]': '00000101',                0: '00110000',      '[': '01011011',
    '[ACKNOWLEDGE]': '00000110',            1: '00110001',      '\\': '01011100',
    '[BELL]': '00000111',                   2: '00110010',      ']': '01011101',
    '[BACKSPACE]': '00001000',              3: '00110011',      '^': '01011110',
    '[HORIZONTAL TAB]': '00001001',         4: '00110100',      '_': '01011111',
    '[LINE FEED]': '00001010',              5: '00110101',      '`': '01100000',
    '[VERTICAL TAB]': '00001011',           6: '00110110',      'a': '01100001',
    '[FROM FEED]': '00001100',              7: '00110111',      'b': '01100010',
    '[CARRIAGE RETURN]': '00001101',        8: '00111000',      'c': '01100011',
    '[SHIFT OUT]': '00001110',              9: '00111001',      'd': '01100100',
    '[SHIFT IN]': '00001111',               ':': '00111010',    'e': '01100101',
    '[DATA LINK ESCAPE]': '00010000',       ';': '00111011',    'f': '01100110',
    '[DEVICE CONTROL 1]': '00010001',       '<': '00111100',    'g': '01100111',
    '[DEVICE CONTROL 2]': '00010010',       '=': '00111101',    'h': '01101000',
    '[DEVICE CONTROL 3]': '00010011',       '>': '00111110',    'i': '01101001',
    '[DEVICE CONTROL 4]': '00010100',       '?': '00111111',    'j': '01101010',
    '[NEGATIVE ACKNOWLEDGE]': '00010101',   '@': '01000000',    'k': '01101011',
    '[SYNCHRONOUS IDLE]': '00010110',       'A': '01000001',    'l': '01101100',
    '[END OF TRANS. BLOCK]': '00010111',    'B': '01000010',    'm': '01101101',
    '[CANCEL]': '00011000',                 'C': '01000011',    'n': '01101110',
    '[END OF MEDIUM]': '00011001',          'D': '01000100',    'o': '01101111',
    '[SUBSTITUTE]': '00011010',             'E': '01000101',    'p': '01110000',
    '[ESCAPE]': '00011011',                 'F': '01000110',    'q': '01110001',
    '[FILE SEPARATOR]': '00011100',         'G': '01000111',    'r': '01110010',
    '[GROUP SEPARATOR]': '00011101',        'H': '01001000',    's': '01110011',
    '[RECORD SEPARATOR]': '00011110',       'I': '01001001',    't': '01110100',
    '[UNIT SEPARATION]': '00011111',        'J': '01001010',    'u': '01110101',
    '[SPACE]': '00100000',                  'K': '01001011',    'v': '01110110',
    '!': '00100001',                        'L': '01001100',    'w': '01110111',
    '"': '00100010',                        'M': '01001101',    'x': '01111000',
    '#': '00100011',                        'N': '01001110',    'y': '01111001',
    '$': '00100100',                        'O': '01001111',    'z': '01111010',
    '%': '00100101',                        'P': '01010000',    '{': '01111011',
    '&': '00100110',                        'Q': '01010001',    '|': '01111100',
    "'": '00100111',                        'R': '01010010',    '}': '01111101',
    '(': '00101000',                        'S': '01010011',    '~': '01111110',
    ')': '00101001',                        'T': '01010100',    '[DEL]': '01111111',
    '*': '00101010',                        'U': '01010101'
}
OCTAL2TEXT_CODE_DICT = {
    '[NULL]': '000',                    '+': '053',     'V': '126',
    '[START OF HEADING]': '001',        ',': '054',     'W': '127',
    '[START OF TEXT]': '002',           '-': '055',     'X': '130',
    '[END OF TEXT]': '003',             '.': '056',     'Y': '131',
    '[END OF TRANSMISSION]': '004',     '/': '057',     'Z': '132',
    '[ENQUIRY]': '005',                 0: '060',       '[': '133',
    '[ACKNOWLEDGE]': '006',             1: '061',       '\\': '134',
    '[BELL]': '007',                    2: '062',       ']': '135',
    '[BACKSPACE]': '010',               3: '063',       '^': '136',
    '[HORIZONTAL TAB]': '011',          4: '064',       '_': '137',
    '[LINE FEED]': '012',               5: '065',       '`': '140',
    '[VERTICAL TAB]': '013',            6: '066',       'a': '141',
    '[FROM FEED]': '014',               7: '067',       'b': '142',
    '[CARRIAGE RETURN]': '015',         8: '070',       'c': '143',
    '[SHIFT OUT]': '016',               9: '071',       'd': '144',
    '[SHIFT IN]': '017',                ':': '072',     'e': '145',
    '[DATA LINK ESCAPE]': '020',        ';': '073',     'f': '146',
    '[DEVICE CONTROL 1]': '021',        '<': '074',     'g': '147',
    '[DEVICE CONTROL 2]': '022',        '=': '075',     'h': '150',
    '[DEVICE CONTROL 3]': '023',        '>': '076',     'i': '151',
    '[DEVICE CONTROL 4]': '024',        '?': '077',     'j': '152',
    '[NEGATIVE ACKNOWLEDGE]': '025',    '@': '100',     'k': '153',
    '[SYNCHRONOUS IDLE]': '026',        'A': '101',     'l': '154',
    '[END OF TRANS. BLOCK]': '027',     'B': '102',     'm': '155',
    '[CANCEL]': '030',                  'C': '103',     'n': '156',
    '[END OF MEDIUM]': '031',           'D': '104',     'o': '157',
    '[SUBSTITUTE]': '032',              'E': '105',     'p': '160',
    '[ESCAPE]': '033',                  'F': '106',     'q': '161',
    '[FILE SEPARATOR]': '034',          'G': '107',     'r': '162',
    '[GROUP SEPARATOR]': '035',         'H': '110',     's': '163',
    '[RECORD SEPARATOR]': '036',        'I': '111',     't': '164',
    '[UNIT SEPARATION]': '037',         'J': '112',     'u': '165',
    '[SPACE]': '040',                   'K': '113',     'v': '166',
    '!': '041',                         'L': '114',     'w': '167',
    '"': '042',                         'M': '115',     'x': '170',
    '#': '043',                         'N': '116',     'y': '171',
    '$': '044',                         'O': '117',     'z': '172',
    '%': '045',                         'P': '120',     '{': '173',
    '&': '046',                         'Q': '121',     '|': '174',
    "'": '047',                         'R': '122',     '}': '175',
    '(': '050',                         'S': '123',     '~': '176',
    ')': '051',                         'T': '124',     '[DEL]': '177',
    '*': '052',                         'U': '125'
}
ORD2BIN_CODE_DICT = {
        0: '00000000', 43: '00101011', 86: '01010110',
        1: '00000001', 44: '00101100', 87: '01010111',
        2: '00000010', 45: '00101101', 88: '01011000',
        3: '00000011', 46: '00101110', 89: '01011001',
        4: '00000100', 47: '00101111', 90: '01011010',
        5: '00000101', 48: '00110000', 91: '01011011',
        6: '00000110', 49: '00110001', 92: '01011100',
        7: '00000111', 50: '00110010', 93: '01011101',
        8: '00001000', 51: '00110011', 94: '01011110',
        9: '00001001', 52: '00110100', 95: '01011111',
        10: '00001010', 53: '00110101', 96: '01100000',
        11: '00001011', 54: '00110110', 97: '01100001',
        12: '00001100', 55: '00110111', 98: '01100010',
        13: '00001101', 56: '00111000', 99: '01100011',
        14: '00001110', 57: '00111001', 100: '01100100',
        15: '00001111', 58: '00111010', 101: '01100101',
        16: '00010000', 59: '00111011', 102: '01100110',
        17: '00010001', 60: '00111100', 103: '01100111',
        18: '00010010', 61: '00111101', 104: '01101000',
        19: '00010011', 62: '00111110', 105: '01101001',
        20: '00010100', 63: '00111111', 106: '01101010',
        21: '00010101', 64: '01000000', 107: '01101011',
        22: '00010110', 65: '01000001', 108: '01101100',
        23: '00010111', 66: '01000010', 109: '01101101',
        24: '00011000', 67: '01000011', 110: '01101110',
        25: '00011001', 68: '01000100', 111: '01101111',
        26: '00011010', 69: '01000101', 112: '01110000',
        27: '00011011', 70: '01000110', 113: '01110001',
        28: '00011100', 71: '01000111', 114: '01110010',
        29: '00011101', 72: '01001000', 115: '01110011',
        30: '00011110', 73: '01001001', 116: '01110100',
        31: '00011111', 74: '01001010', 117: '01110101',
        32: '00100000', 75: '01001011', 118: '01110110',
        33: '00100001', 76: '01001100', 119: '01110111',
        34: '00100010', 77: '01001101', 120: '01111000',
        35: '00100011', 78: '01001110', 121: '01111001',
        36: '00100100', 79: '01001111', 122: '01111010',
        37: '00100101', 80: '01010000', 123: '01111011',
        38: '00100110', 81: '01010001', 124: '01111100',
        39: '00100111', 82: '01010010', 125: '01111101',
        40: '00101000', 83: '01010011', 126: '01111110',
        41: '00101001', 84: '01010100', 127: '01111111',
        42: '00101010', 85: '01010101',
}
ORD2HEX_CODE_DICT = {
        0: '00',    43: '2B',   86: '56',
        1: '01',    44: '2C',   87: '57',
        2: '02',    45: '2D',   88: '58',
        3: '03',    46: '2E',   89: '59',
        4: '04',    47: '2F',   90: '5A',
        5: '05',    48: '30',   91: '5B',
        6: '06',    49: '31',   92: '5C',
        7: '07',    50: '32',   93: '5D',
        8: '08',    51: '33',   94: '5E',
        9: '09',    52: '34',   95: '5F',
        10: '0A',   53: '35',   96: '60',
        11: '0B',   54: '36',   97: '61',
        12: '0C',   55: '37',   98: '62',
        13: '0D',   56: '38',   99: '63',
        14: '0E',   57: '39',   100: '64',
        15: '0F',   58: '3A',   101: '65',
        16: '10',   59: '3B',   102: '66',
        17: '11',   60: '3C',   103: '67',
        18: '12',   61: '3D',   104: '68',
        19: '13',   62: '3E',   105: '69',
        20: '14',   63: '3F',   106: '6A',
        21: '15',   64: '40',   107: '6B',
        22: '16',   65: '41',   108: '6C',
        23: '17',   66: '42',   109: '6D',
        24: '18',   67: '43',   110: '6E',
        25: '19',   68: '44',   111: '6F',
        26: '1A',   69: '45',   112: '70',
        27: '1B',   70: '46',   113: '71',
        28: '1C',   71: '47',   114: '72',
        29: '1D',   72: '48',   115: '73',
        30: '1E',   73: '49',   116: '74',
        31: '1F',   74: '4A',   117: '75',
        32: '20',   75: '4B',   118: '76',
        33: '21',   76: '4C',   119: '77',
        34: '22',   77: '4D',   120: '78',
        35: '23',   78: '4E',   121: '79',
        36: '24',   79: '4F',   122: '7A',
        37: '25',   80: '50',   123: '7B',
        38: '26',   81: '51',   124: '7C',
        39: '27',   82: '52',   125: '7D',
        40: '28',   83: '53',   126: '7E',
        41: '29',   84: '54',   127: '7F',
        42: '2A',   85: '55',
}
ORD2OCT_CODE_DICT = {
        0: '000',   43: '053',  86: '126',
        1: '001',   44: '054',  87: '127',
        2: '002',   45: '055',  88: '130',
        3: '003',   46: '056',  89: '131',
        4: '004',   47: '057',  90: '132',
        5: '005',   48: '060',  91: '133',
        6: '006',   49: '061',  92: '134',
        7: '007',   50: '062',  93: '135',
        8: '010',   51: '063',  94: '136',
        9: '011',   52: '064',  95: '137',
        10: '012',  53: '065',  96: '140',
        11: '013',  54: '066',  97: '141',
        12: '014',  55: '067',  98: '142',
        13: '015',  56: '070',  99: '143',
        14: '016',  57: '071',  100: '144',
        15: '017',  58: '072',  101: '145',
        16: '020',  59: '073',  102: '146',
        17: '021',  60: '074',  103: '147',
        18: '022',  61: '075',  104: '150',
        19: '023',  62: '076',  105: '151',
        20: '024',  63: '077',  106: '152',
        21: '025',  64: '100',  107: '153',
        22: '026',  65: '101',  108: '154',
        23: '027',  66: '102',  109: '155',
        24: '030',  67: '103',  110: '156',
        25: '031',  68: '104',  111: '157',
        26: '032',  69: '105',  112: '160',
        27: '033',  70: '106',  113: '161',
        28: '034',  71: '107',  114: '162',
        29: '035',  72: '110',  115: '163',
        30: '036',  73: '111',  116: '164',
        31: '037',  74: '112',  117: '165',
        32: '040',  75: '113',  118: '166',
        33: '041',  76: '114',  119: '167',
        34: '042',  77: '115',  120: '170',
        35: '043',  78: '116',  121: '171',
        36: '044',  79: '117',  122: '172',
        37: '045',  80: '120',  123: '173',
        38: '046',  81: '121',  124: '174',
        39: '047',  82: '122',  125: '175',
        40: '050',  83: '123',  126: '176',
        41: '051',  84: '124',  127: '177',
        42: '052',  85: '125',
}
ORD2MORSE_CODE_DICT = {
        33: '-.-.--', 65: '.-',
        34: '.-..-.', 66: '-...',
        36: '...-..-', 67: '-.-.',
        38: '.-...', 68: '-..',
        39: '.----.', 69: '.',
        40: '-.--.', 70: '..-.',
        41: '-.--.-', 71: '--.',
        43: '.-.-.', 72: '....',
        44: '--..--', 73: '..',
        45: '-....-', 74: '.---',
        46: '.-.-.-', 75: '-.-',
        47: '-..-.', 76: '.-..',
        48: '-----', 77: '--',
        49: '.----', 78: '-.',
        50: '..---', 79: '---',
        51: '...--', 80: '.--.',
        52: '....-', 81: '--.-',
        53: '.....', 82: '.-.',
        54: '-....', 83: '...',
        55: '--...', 84: '-',
        56: '---..', 85: '..-',
        57: '----.', 86: '...-',
        58: '---...', 87: '.--',
        59: '-.-.-.', 88: '-..-',
        61: '-...-', 89: '-.--',
        63: '..--..', 90: '--..',
        64: '.--.-.', 95: '..--.-',
}
BIN2ORD_CODE_DICT = {
    '00000000': 0,      '00101011': 43,     '01010110': 86,
    '00000001': 1,      '00101100': 44,     '01010111': 87,
    '00000010': 2,      '00101101': 45,     '01011000': 88,
    '00000011': 3,      '00101110': 46,     '01011001': 89,
    '00000100': 4,      '00101111': 47,     '01011010': 90,
    '00000101': 5,      '00110000': 48,     '01011011': 91,
    '00000110': 6,      '00110001': 49,     '01011100': 92,
    '00000111': 7,      '00110010': 50,     '01011101': 93,
    '00001000': 8,      '00110011': 51,     '01011110': 94,
    '00001001': 9,      '00110100': 52,     '01011111': 95,
    '00001010': 10,     '00110101': 53,     '01100000': 96,
    '00001011': 11,     '00110110': 54,     '01100001': 97,
    '00001100': 12,     '00110111': 55,     '01100010': 98,
    '00001101': 13,     '00111000': 56,     '01100011': 99,
    '00001110': 14,     '00111001': 57,     '01100100': 100,
    '00001111': 15,     '00111010': 58,     '01100101': 101,
    '00010000': 16,     '00111011': 59,     '01100110': 102,
    '00010001': 17,     '00111100': 60,     '01100111': 103,
    '00010010': 18,     '00111101': 61,     '01101000': 104,
    '00010011': 19,     '00111110': 62,     '01101001': 105,
    '00010100': 20,     '00111111': 63,     '01101010': 106,
    '00010101': 21,     '01000000': 64,     '01101011': 107,
    '00010110': 22,     '01000001': 65,     '01101100': 108,
    '00010111': 23,     '01000010': 66,     '01101101': 109,
    '00011000': 24,     '01000011': 67,     '01101110': 110,
    '00011001': 25,     '01000100': 68,     '01101111': 111,
    '00011010': 26,     '01000101': 69,     '01110000': 112,
    '00011011': 27,     '01000110': 70,     '01110001': 113,
    '00011100': 28,     '01000111': 71,     '01110010': 114,
    '00011101': 29,     '01001000': 72,     '01110011': 115,
    '00011110': 30,     '01001001': 73,     '01110100': 116,
    '00011111': 31,     '01001010': 74,     '01110101': 117,
    '00100000': 32,     '01001011': 75,     '01110110': 118,
    '00100001': 33,     '01001100': 76,     '01110111': 119,
    '00100010': 34,     '01001101': 77,     '01111000': 120,
    '00100011': 35,     '01001110': 78,     '01111001': 121,
    '00100100': 36,     '01001111': 79,     '01111010': 122,
    '00100101': 37,     '01010000': 80,     '01111011': 123,
    '00100110': 38,     '01010001': 81,     '01111100': 124,
    '00100111': 39,     '01010010': 82,     '01111101': 125,
    '00101000': 40,     '01010011': 83,     '01111110': 126,
    '00101001': 41,     '01010100': 84,     '01111111': 127,
    '00101010': 42,     '01010101': 85
}
BIN2HEX_CODE_DICT = {}
BIN2OCT_CODE_DICT = {}
BIN2MORSE_CODE_DICT = {}
HEX2ORD_CODE_DICT = {}
HEX2BIN_CODE_DICT = {}
HEX2OCT_CODE_DICT = {}
HEX2MORSE_CODE_DICT = {}
OCT2ORD_CODE_DICT = {}
OCT2BIN_CODE_DICT = {}
OCT2HEX_CODE_DICT = {}
OCT2MORSE_CODE_DICT = {}
MORSE2ORD_CODE_DICT = {}
MORSE2BIN_CODE_DICT = {}
MORSE2HEX_CODE_DICT = {}
MORSE2OCT_CODE_DICT = {}


def text2morse(message):
    cipher = ''
    for letter in message:
        if letter != ' ':

            # Looks up the dictionary and adds the
            # corresponding morse code
            # along with a space to separate
            # morse codes for different characters
            cipher += MORSE_CODE_DICT[letter] + ' '
        else:
            # 1 space indicates different characters
            # and 2 indicates different words
            cipher += ' '

    return cipher


# Decodes Morse Code string to a text string.
def morse2text(message):

    # extra space added at the end to access the
    # last morse code
    message += ' '

    decipher = ''
    cipher_text = ''
    i = int()
    for letter in message:

        # checks for space
        if letter != ' ':

            # counter to keep track of space
            i = 0

            # storing morse code of a single character
            cipher_text += letter

        # in case of space
        else:
            # if i = 1 that indicates a new character
            i += 1

            # if i = 2 that indicates a new word
            if i == 2:

                # adding space to separate words
                decipher += ' '
            else:

                # accessing the keys using their values (reverse of encryption)
                decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT.values()).index(cipher_text)]
                cipher_text = ''

    return decipher


'''
# Converts ordinal to binary.
def ord2bin(message):
    print("This will convert ordinal to binary and vice versa.")


# Converts ordinal to hexadecimal.
def ord2hex(message):
    print("This will convert ordinal to hexadecimal and vice versa.")


# Converts ordinal to octal.
def ord2oct(message):
    print("This will convert ordinal to octal and vice versa.")


# Converts ordinal to Morse Code.
def ord2morse(message):
    print("This will convert ordinal to morse code and vice versa.")
'''


# Converts string text to binary.
def text2bin(message):
    cipher = ''
    for letter in message:
        if letter != ' ':
            # Looks up the dictionary and adds the
            # corresponding morse code
            # along with a space to separate
            # morse codes for different characters
            cipher += BINARY_CODE_DICT[letter] + ' '
        else:
            # 1 space indicates different characters
            # and 2 indicates different words
            cipher += ' '

    return cipher


# Converts binary to string text.
def bin2text(message):

    # extra space added at the end to access the
    # last morse code
    message += ' '

    decipher = ''
    cipher_text = ''
    i = int()
    for letter in message:

        # checks for space
        if letter != ' ':

            # counter to keep track of space
            i = 0

            # storing morse code of a single character
            cipher_text += letter

        # in case of space
        else:
            # if i = 1 that indicates a new character
            i += 1

            # if i = 2 that indicates a new word
            if i == 2:

                # adding space to separate words
                decipher += ' '
            else:

                # accessing the keys using their values (reverse of encryption)
                decipher += list(BINARY_CODE_DICT.keys())[list(BINARY_CODE_DICT.values()).index(cipher_text)]
                cipher_text = ''

    return decipher


'''
# Converts binary to hexadecimal.
def bin2hex(message):
    print("This will convert binary to hexadecimal and vice versa.")


# Converts binary to octal.
def bin2oct(message):
    print("This will convert binary to octal and vice versa.")


# Converts binary to Morse Code.
def bin2morse(message):
    print("This will convert binary to morse and vice versa.")


# Converts hexadecimal to octal.
def hex2oct(message):
    print("This will convert hexadecimal to octal and vice versa.")


# Converts hexadecimal to Morse Code.
def hex2morse(message):
    print("This will convert hexadecimal to morse and vice versa.")


# Converts string text to octal.
def text2oct(message):
    print("This converts octal to string text.")


# Converts octal to string text.
def oct2text(message):
    print("This converts octal to string text.")


# Converts octal to Morse Code.
def oct2morse(message):
    print("This will convert binary to morse and vice versa.")
'''

